import json
import time


def read_json(file):
    with open(file, 'r+') as file:
        content = file.read()
    content = json.loads(content)
    return content


def save_json(data, file):
    dict_json = json.dumps(data, indent=1)
    with open(file, 'w+', newline='\n') as file:
        file.write(dict_json)


def print_outputs(outputs):
    oo = []
    for output in outputs:
        prompt = output.prompt
        generated_text = output.outputs[0].text
        oo.append(generated_text)
        print(f"Generated text: {generated_text!r}")
    print(oo[0])
    return oo[0]


from vllm import LLM, SamplingParams

sampling_params = SamplingParams(temperature=0.8, top_p=0.95, max_tokens=2048)

model_path = ''
data_path = 'all_data.json'
save_file_path = ''

llm = LLM(model=model_path,
          tensor_parallel_size=2, trust_remote_code=True, max_model_len=2048)

data = read_json(data_path)
import random

random.seed(1)
random.shuffle(data)
data = data[1000:5000]
result = []
for i in range(len(data)):
    prompt1 = '''
You are a professional Operations Engineer, please give the key points to focus on understanding the following logs.  These key points are used to build an overall framework for understanding the log. The user can fully understand the log by analyzing it step by step according to these key points.
Therefore only the key points to focus on need to be given in the output and no detailed explanation is needed. For example: 1. parameter information; 2. log description; 3. possible causes; 4. procedure step.

Input Logs: {}
'''
    msg = [
        {
            "role": "user",
            "content": prompt1.format(data[i][0].split('Input Log: ')[-1])
        }]
    outputs = llm.chat(msg, sampling_params, use_tqdm=True)
    key_point = print_outputs(outputs)
    msg.append({"role": "assistant", "content": key_point})

    prompt2 = '''
You are a professional Operations Engineer, Referring to these key points, please explain the contents of the log in one paragraph for improving the understanding of this log. 
Requirement: The generated content needs to cover the understanding of these key points. Content also needs to be critical, brief, and accurate.
'''
    msg.append({"role": "user", "content": prompt2})

    full_content = print_outputs(llm.chat(msg, sampling_params, use_tqdm=True))
    msg.append({"role": "assistant", "content": full_content})
    prompt3 = '''
You are a fair and objective O&M expert, now a raw log is provided, along with the corresponding knowledge. The knowledge is generated by the LLM, please evaluate whether the content  passes the following requirements.
Evaluation requirements:
1. Completeness: the generated content does not exist omitting key points;
2. Consistency: the content generated according to key points has no deviation from the context of the logs;
3. Conciseness: the generated content is relevant to understanding the log.

Please give the final result [Result: True or False], True means that the requirement is satisfied and False means that it is not satisfied. If it is not satisfied, please give the reason why it is not satisfied.

For example:
Raw Log: L2IFPPI/4/AP_SESSION_EXCEEDS_THRESHOLD: OID [oid] The AP session usage exceeds the threshold.(ApSessionNum=[INTEGER], ApSessionNumThreshold=[INTEGER], ApSessionNumSpec=[INTEGER].)

Key points:
1. Log identifier and severity level
2. Description of the log event
3. Parameters and their values (e.g., ApSessionNum, ApSessionNumThreshold, ApSessionNumSpec)
4. Threshold value for the AP session usage
5. Potential causes for the threshold breach

Examples 1:
[
	Raw generated knowledge: The log "L2IFPPI/4/AP_SESSION_EXCEEDS_THRESHOLD" signifies a critical event where the AP session usage surpasses a predefined threshold. It contains essential parameters such as ApSessionNum, ApSessionNumThreshold, and ApSessionNumSpec, detailing the actual and threshold values for the AP session count. This log is crucial for monitoring and managing the network infrastructure, indicating a potential issue that demands immediate attention to prevent service disruptions, performance degradation, or other adverse effects caused by the excessive AP session usage.

	Results: True
]
Examples 2:
[
	Raw generated knowledge: The log 'L2IFPPI/4/AP_SESSION_EXCEEDS_THRESHOLD' indicates that the AP session usage has exceeded a certain threshold. This log contains parameters such as ApSessionNum and ApSessionNumThreshold, which describe the actual and threshold session counts. It serves as an important indicator for monitoring network performance.

	Results: False, Reason: The generated knowledge fails to meet the completeness requirement because it omits key points such as the severity level of the log, the parameter 'ApSessionNumSpec', the specific threshold value for AP session usage, and potential causes for the threshold breach. These omissions significantly reduce the understanding and actionable insight derived from the log.
]
Examples 3:
[
	Raw generated knowledge: The log "L2IFPPI/4/AP_SESSION_EXCEEDS_THRESHOLD" signifies a critical event where the AP session usage surpasses a predefined threshold. It contains parameters such as ApSessionNum, ApSessionNumThreshold, and ApSessionNumSpec, which detail the actual and threshold values for the AP session count. This log suggests a potential issue requiring attention to avoid disruptions. However, in some cases, surpassing the threshold might not necessarily indicate a problem, as it could occur due to normal system behavior or planned activities.

	Results: Fasle, Reason: The generated knowledge introduces inconsistencies by deviating from the log's core context. Specifically, it undermines the criticality of the event by suggesting that surpassing the threshold might not indicate a problem. This contradicts the original intent of the log, which emphasizes the need for immediate action to prevent adverse effects. As a result, the content fails to meet the consistency requirement.
]
Examples 4:
[
	Raw generated knowledge: The log "L2IFPPI/4/AP_SESSION_EXCEEDS_THRESHOLD" represents a significant network monitoring event, classified as a critical issue, where the AP session count exceeds the predefined threshold. This log is indicative of a potential anomaly in the network, signifying that the number of active AP sessions, represented by the parameter ApSessionNum, has surpassed the limit specified by ApSessionNumThreshold, which is further detailed alongside the specification parameter ApSessionNumSpec. These parameters collectively provide a granular view of the actual session count, the set threshold, and the specific configuration used for threshold evaluation. The occurrence of this log warrants immediate attention from network administrators to investigate and mitigate the issue, as prolonged excessive AP session usage may strain network resources, degrade system performance, and lead to possible service interruptions. The breach of the threshold could occur due to several reasons, such as a surge in client connections, misconfiguration, or unexpected high traffic demand, all of which require swift analysis and appropriate corrective actions to restore optimal network functionality. This log is vital for ensuring the stability and reliability of the network infrastructure, and its timely resolution is critical for maintaining service quality.

	Results: False, Reason: The generated knowledge significantly violates the conciseness requirement as it includes excessive elaboration and redundant details that do not contribute directly to understanding the log. For example, phrases like "warrants immediate attention from network administrators to investigate and mitigate the issue" and "prolonged excessive AP session usage may strain network resources, degrade system performance, and lead to possible service interruptions" are overly verbose and repeat concepts already clear from the log description. The amount of detail provided about potential causes and actions is unnecessary for understanding the log itself, making the content unnecessarily lengthy and less concise.
]
'''
    msg.append({"role": "user", "content": prompt3})
    evaluation = print_outputs(llm.chat(msg, sampling_params, use_tqdm=True))
    again_content = '-'
    again_again_content = '-'
    evaluation_again = '-'
    evaluation_again_again = '-'
    again_again_agin_content = '-'
    if 'False' in evaluation or 'false' in evaluation:
        msg.append({"role": "assistant", "content": evaluation})
        prompt_again = '''
You are a professional Operations Engineer, please refers to the content of the evaluation and re-generate the explanation of the log, requesting that the quality of the generated content be improved based on the suggestion of evaluation.
In addition, the generated content still needs to fulfil the previous requirements: The generated content needs to cover the understanding of these key points. Content also needs to be critical, brief, and accurate.
'''
        msg.append({"role": "user", "content": prompt_again})
        again_content = print_outputs(llm.chat(msg, sampling_params, use_tqdm=True))
        msg.append({"role": "assistant", "content": again_content})

        # evaluation_again
        msg.append({"role": "user", "content": prompt3})
        evaluation_again = print_outputs(llm.chat(msg, sampling_params, use_tqdm=True))
        if 'False' in evaluation_again or 'false' in evaluation_again:
            msg.append({"role": "assistant", "content": evaluation_again})
            msg.append({"role": "user", "content": prompt_again})
            again_again_content = print_outputs(llm.chat(msg, sampling_params, use_tqdm=True))

            msg.append({"role": "assistant", "content": again_again_content})

            # evaluation_again
            msg.append({"role": "user", "content": prompt3})
            evaluation_again_again = print_outputs(llm.chat(msg, sampling_params, use_tqdm=True))
            if 'False' in evaluation_again_again or 'false' in evaluation_again_again:
                msg.append({"role": "assistant", "content": evaluation_again_again})
                msg.append({"role": "user", "content": prompt_again})
                again_again_agin_content = print_outputs(llm.chat(msg, sampling_params, use_tqdm=True))

    result.append(
        [i, data[i][0].split('Input Log: ')[-1], key_point, full_content, evaluation, again_content, evaluation_again,
         again_again_content, evaluation_again_again, again_again_agin_content])

    print('---' * 10)
    print(i, key_point)
    print('*****')
    print(full_content)
    print('*****')
    print(evaluation)
    print('*****')
    print(again_content)
    print('----' * 10)
    print('\n\n\n')
    if i != 0 and i % 500 == 0:
        save_json(result,
                  "/cpfs01/projects-HDD/cfff-0082a359858b_HDD/mlp_21110240033/LLaMA-Factory/log_evaluate/mec_llama3/output/expert_llama3_mec_" + str(
                      i) + ".json")

save_json(result, model_path)